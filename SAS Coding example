  /*********************************************************/
 /*Step 1: Create &samples samples of &n size from dataset*/
/*********************************************************/

%let samples = 5;	/*Number of samples*/
%let n = .1;		/*sample size*/
%let mincs = 0;		/*min score to consider for threshold*/
%let maxcs = 1000;	/*max score to consider for threshold*/

%macro sample(df,score);
Proc sql;
Create table Input as
Select * from &df.
Where &score. between &mincs. and &maxcs.;
select round(count(*) * &n.) into : n_
from input;
%do seed = 1 %to &samples.;
proc surveyselect data=input noprint
	out=_sample_&seed.
	method=srs
	samplesize=&n_.
	seed=&seed.;
%end;
%mend;

%sample(df,score)

  /****************************************************************************************************************/
 /*Step 2: Calculate a variety of performance metrics for binary classification based on model probability scores*/
/****************************************************************************************************************/

/*group: Nominal value representing a subgroup if needed*/
/*score: interval-ratio model score*/
/*target: binary (0=negative 1=positive)*/

%macro performets(group,score,target);
%local seed cs;
%do seed = 1 %to &samples.; 
%do cs=&mincs. %to &maxcs.; /*Calculate metrics at every threshold, for each sample*/
proc sql;
create table mets_&group._&cs. as
select 	 &cs. as threshold, sum(&target.) as total_fraud, count(*) - sum(&target.) as total_good
        ,sum(case when &score. > &cs. then 1 else 0 end) as TotalGT
	,sum(case when &score. > &cs. then &target. else 0 end) as TruePos
	,calculated TotalGT - calculated TruePos as FalsePos
        ,sum(case when &score. <= &cs. then 1 else 0 end) as TotalLE
	,sum(case when &score. <= &cs. then &target. else 0 end) as FalseNeg
	,calculated TotalLE - calculated FalseNeg as TrueNeg
	,calculated TruePos / (calculated TruePos + calculated FalsePos) as Precision
	,calculated TruePos / (calculated TruePos + calculated FalseNeg) as Recall
	,2 * ((calculated Precision * calculated Recall) / (calculated Precision + calculated Recall)) as F1
	,-1 * ((calculated FalsePos / calculated TotalGT) * log((calculated FalsePos / calculated TotalGT)) + (calculated TruePos / calculated TotalGT) * log((calculated TruePos / calculated TotalGT))) as EntropyGT
	,-1 * ((calculated TruePos / calculated TotalLE) * log((calculated TruePos / calculated TotalLE)) + (calculated FalseNeg / calculated TotalLE) * log((calculated FalseNeg / calculated TotalLE))) as EntropyLE
	,sum(calculated EntropyGT, calculated EntropyLE)/2 as Entropy
	,1 - (calculated FalsePos / calculated TotalGT)**2 - (calculated TruePos / calculated TotalGT)**2 as GiniGT
	,1 - (calculated TrueNeg / calculated TotalLE)**2 - (calculated FalseNeg / calculated TotalLE)**2 as GiniLE
	,sum(calculated GiniGT, calculated GiniLE)/2 as Gini
	,((calculated TruePos * calculated TrueNeg) - (calculated FalsePos * calculated FalseNeg)) /
	 sqrt((calculated TruePos + calculated FalsePos) * (calculated FalseNeg + calculated TrueNeg) * (calculated TruePos + calculated FalseNeg) * (calculated TrueNeg + calculated FalsePos)) as Phi

from _sample_&seed.
where lob = "&group.";
%end;
/*concatenate all tables from the same sample together*/
data &group.&score._mets_&seed.; 
set mets_:;
/*delete excess files so SAS doesn't freeze*/
proc datasets library=work nolist;
delete mets_:;

proc sort data=&group.&score._mets_&seed.;
by threshold;

%end;
/*Concatenate all samples together*/
data fin_mets_&group.;
set &group.&score._mets_:;
/*Create one dataset computing average performance metric from each sample*/
proc sql;
create table avg_mets_&group. as
select threshold, avg(Entropy) as Entropy, avg(precision) as Precision, avg(recall) as Recall, avg(F1) as F1, avg(Gini) as Gini, avg(phi) as Phi
from fin_mets_&group.
group by threshold;

%mend;

%performets(group1,score,Target)
%performets(group2,score,Target)
%performets(group3,score,Target)

  /***************************/
 /*Step 3: Visualize results*/
/***************************/

data null;
do Threshold=&mincs. to &maxcs. by 1;
output;
end;
run;

%macro fgplot(lob,ymax,df,score,target,metric);
proc sql;
create table a as 
select &score., sum(&target.) as Fraud, count(*) - calculated Fraud as Good
from (select * from input where lob = "&lob.")
group by &score.;

create table b as 
select   b.threshold as &score.
	,ceil(b.threshold / &binsize.) * &binsize. as Bin
	,0 as Floor
	,case when Fraud = . then 0 else Fraud end as Fraud
	,case when Good = . then 0 else Good end as Good
	,calculated good + calculated fraud as total
	,Entropy, Precision, Recall, F1, Gini, Phi
from a
right join null b
on a.&score. = b.threshold
left join avg_mets_&lob. c
on c.threshold = b.threshold;

/*store extereme values for specified metric. Min values are for impurity metrics, max are for F1 and Phi*/
proc sql noprint;
select &score., &metric. into : &min., : min_score from b where &score. < &maxcs. - &w. and &score. > &w. order by &metric.;
select &score., &metric. into : &max., : max_score from b where &score. < &maxcs. - &w. and &score. > &w. order by &metric. desc;

create table c as
select Bin, sum(fraud) as fraud, sum(good) as good, sum(total) as total
from b 
group by bin;

create table d as 
select &score., Floor, Entropy, Precision, Recall, F1, Gini, Phi, c.*
from b b
left join c c
on b.Bin = c.Bin
order by &score.;

title "&lob.: Performance Metrics by &score.";
proc sgplot data=d;
band x=bin lower=good upper=total / legendlabel="Fraud" name="Total" fillattrs=(color=cxdc143c) transparency=0.4;
band x=bin lower=floor upper=good / legendlabel="Good Apps" name="Good" fillattrs=(color=cx4dcfb0) transparency=0.7;

%if &metric.=F1 %then %do;
refline %sysfunc(scan(&max.,1)) / axis=x lineattrs=(thickness=1 color=cxa0a0a0 pattern=solid) label="Max &metric.:%sysfunc(scan(&max.,1))" labelattrs=(weight=bold);
series x=&score. y=&metric. / y2axis x2axis lineattrs=(thickness=3 color=cx0515a0 pattern=solid);
series x=&score. y=Precision / y2axis x2axis lineattrs=(thickness=3 color=cx1019ba pattern=longdash) transparency=0.7;
series x=&score. y=Recall / y2axis x2axis lineattrs=(thickness=3 color=cx1019ba pattern=shortdash) transparency=0.7;
%end;

%if &metric.=Phi %then %do;
refline %sysfunc(scan(&max.,1)) / axis=x lineattrs=(thickness=1 color=cxa0a0a0 pattern=solid) label="Max &metric.:%sysfunc(scan(&max.,1))" labelattrs=(weight=bold);
series x=&score. y=&metric. / y2axis x2axis lineattrs=(thickness=3 color=cx0515a0 pattern=solid);
%end;

%if &metric.=Entropy or &metric.=Gini %then %do;
refline %sysfunc(scan(&max.,1)) / axis=x lineattrs=(thickness=1 color=cxa0a0a0 pattern=solid) label="Min &metric.:%sysfunc(scan(&min.,1))" labelattrs=(weight=bold);
series x=&score. y=&metric. / y2axis x2axis lineattrs=(thickness=3 color=cx0515a0 pattern=solid);
%end;

xaxis values=(&mincs. to &maxcs. by %eval(&maxcs. / 50)) fitpolicy=rotate;
yaxis values=(0 to &ymax. by %eval(&ymax. / 10)) grid;
x2axis display=none; y2axis values=(0 to 1 by 0.1);

proc sql;
create table group_&lob. as
select &score., fraud / total as percent "% Fraud" format percent8.2, "Fraud" as Group
from d
group by &score.
union
select &score., good / total as percent "% Fraud" format percent8.2, "Good" as Group
from d
group by &score.;

title "&lob. Fraud Distribution Detail";
proc sgplot data=group_&lob. (where=(&score. >= %eval(&maxcs./2));
styleattrs datacolors=(cxdc143c cx4dbfbc);
vbar &score. / response=percent group=group transparency=0.4 seglabel;
refline .8 / axis=y lineattrs=(thickness=2 color=cx0515a0 pattern=solid);
refline .7 / axis=y lineattrs=(thickness=2 color=cx0515a0 pattern=longdash);
refline .6 / axis=y lineattrs=(thickness=2 color=cx0515a0 pattern=shortdash);
xaxis values=(0 to 1 by .1) label="Number of Applications";

%mend;

%let binsize = 10;
%let w = 20;

ods graphics on / width=12in height=8in;
%fgplot(Product,10000,df,score,target,F1);

%macro KS(df,score,target,group);
proc npar1way data=&df. (where=(lob="&group.")) edf;
class &target.;
var &score.;
ods output EEDFPlot = DFplot_&group.;
ods output KSTest = KSTest_&group.;
ods output KS2Stats = KS2Stats_&group.;

proc sql noprint;
select valueatmaximum into : ks_max from kstest_&group. where class = "Total";
select left(catx(" ","D:",put(nvalue2,percent8.2))) into : D from KS2Stats_&group. where label2 = "D";
select left(catx(" ","&D."lo,"(p",cvalue2,")")) into : Dp from KS2Stats_&group. where name2 = "P_KSA";

proc sql;
create table edf_input_&group. as
select   _x, 0 as floor
	,sum(case when _class = '0' then _edf else . end) as _0 "Good" format percent8.2
	,sum(case when _class = '1' then _edf else . end) as _1 "Fraud" format percent8.2	
from EDFPlot_&group.
group by _x;

title "&group.: K-S Test for 2 Distributions";
ods graphics on / width=9in height=6in;
proc sgplot data=edf_input_&group.;
band x=_x lower=floor upper=_0 / fillattrs=(color=cx4dcfb0) transparency=0.7;
band x=_x lower=floor upper=_1 / fillattrs=(color=cxdc143c) transparency=0.7;
refline &ks_max. / axis=x lineattrs=(thickness=2 color=cx404040 pattern=shortdash) label="Score at D: &ks_max.|| &Dp." labelattrs=(weight=bold);
series x=_x y=_0 / smoothconnect lineattrs=(thickness=2 color=cx4dcfb0 pattern=solid);
series x=_x y=_1 / smoothconnect lineattrs=(thickness=2 color=cxdc143c pattern=solid);
yaxis grid label="EDF"; xaxis label="Score" values=(0 to 1000 by 100);
%mend;

%KS(two,score,target,CC);
